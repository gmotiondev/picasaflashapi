 /** * * * @author      P.J. Onori * @version     0.1 */ package com.somerandomdude.tres.ui.organizers	{	import flash.display.*;	import com.somerandomdude.tres.ui.elements.*;	import com.somerandomdude.tres.dimension.Area;	import com.somerandomdude.tres.ui.organizers.ILayoutOrganizer;	public class GridOrganizer extends LayoutOrganizer implements ILayoutOrganizer	{		private var _rows:uint;		private var _columns:uint;		private var _hPadding:uint=0;		private var _yPadding:uint=0;				/**		 * Accessor for columns property		 *		 * @return	Column length   		 */		public function get columns():uint		{			return _columns;		}				/**		 * Accessor for rows property		 *		 * @return	Row length   		 */		public function get rows():uint		{			return _rows;		}				/**		 * Mutator for x padding property		 *		 * @param	value	X padding of grid cells for layout organizer   		 */		public function set paddingX(value:Number):void		{			this._hPadding=value;			this.adjustLayout();			if(_autoAdjust) this.apply(_tweenFunction);		}				/**		 * Mutator for y padding property		 *		 * @param	value	X padding of grid cells for layout organizer   		 */		public function set paddingY(value:Number):void		{			this._yPadding=value;			this.adjustLayout();			if(_autoAdjust) this.apply(_tweenFunction);		}				/**		 * Accessor for x padding property		 *		 * @return	X padding of grid cells for layout organizer   		 */		public function get paddingX():Number		{			return this._hPadding;		}				/**		 * Accessor for y padding property		 *		 * @return	Y padding of grid cells for layout organizer   		 */		public function get paddingY():Number		{			return this._yPadding;		}				/**		 * Mutator for x property		 *		 * @param	value	Global X position of layout organizer   		 */		public function set x(value:Number):void		{			this._x=value;			this.adjustLayout();			if(_autoAdjust) this.apply(_tweenFunction);		}				/**		 * Mutator for y property		 *		 * @param	value	Global Y position of layout organizer   		 */		public function set y(value:Number):void		{			this._y=value;			this.adjustLayout();			if(_autoAdjust) this.apply(_tweenFunction);		}				/**		 * Mutator for width property		 *		 * @param	value	Global width dimension of layout organizer   		 */		public function set width(value:Number):void		{			this._width=value;			this.adjustLayout();			if(_autoAdjust) this.apply(_tweenFunction);		}				/**		 * Mutator for height property		 *		 * @param	value	Global height dimension of layout organizer   		 */		public function set height(value:Number):void		{			this._height=value;			this.adjustLayout();			if(_autoAdjust) this.apply(_tweenFunction);		}				/**		 * Accessor for cell width property		 *		 * @return	Width dimension of layout cell   		 */		public function get cellWidth():Number		{			return this._cells[0].width;		}				/**		 * Accessor for cell height property		 *		 * @return	Height dimension of layout cell   		 */		public function get cellHeight():Number		{			return this._cells[0].height;		}				/**		 * Constructor for GridOrganizer 		 *		 * @param  target  DisplayObject where all layout elements will reside		 * @param  width  total width of the entire grid		 * @param  height  total height of the entire grid		 * @param  columns  number of columns in the grid		 * @param  rows  number of rows in the grid		 * @param  hPadding  horizontal padding between cells		 * @param  vPadding  vertical padding between cells		 * @param  xOffset  x position of grid		 * @param  yOffset  y position of grid		 */		public function GridOrganizer(target:Sprite, width:Number, height:Number, columns:uint, rows:uint, hPadding:uint=0, vPadding:uint=0, xOffset:Number=0, yOffset:Number=0):void		{			super(target);						this._width=width;			this._height=height;			this._rows=rows;			this._columns=columns;			this._hPadding=hPadding;			this._yPadding=vPadding;			this._x=xOffset;			this._y=yOffset;			this.initGrid();		}				/**		 * Get cell objects by column index		 *		 * @param  column  cell index of grid		 * @return      an array of cell objects by column index		 * @see         Cell		 */		public function getColumn(column:uint):Array		{			var c:Array = new Array();			for(var i:int=0; i<_rows; i++)			{				c.push(_cells[(i*_columns)+column])			}			return c;		}				/**		 * Get cell objects by row index		 *		 * @param  row  row index of grid		 * @return      an array of cell objects by row index		 * @see         Cell		 */		public function getRow(row:uint):Array		{			var c:Array = new Array();			for(var i:int=row*_columns; i<(row*_columns)+_columns; i++)			{				c.push(_cells[i])			}			return c;		}				/**		 * Removes cell link of DisplayObject at specified grid coordinates		 *		 * @param  column  column index of grid		 * @param  row  row index of grid		 */		public function removeItemAt(column:uint, row:uint):void		{			this.getCellFromCoordinates(column, row).link=null;		}				/**		 * Adds cell link of DisplayObject at specified grid coordinates		 *		 * @param  column  column index of grid		 * @param  row  row index of grid		 * @param  moveToCoordinates  automatically move DisplayObject to corresponding cell's coordinates		 * @param addToStage  adds a child DisplayObject instance to target's DisplayObjectContainer instance		 */		public function addItemAt(object:DisplayObject, column:uint, row:uint, moveToCoordinates:Boolean=true, addToStage:Boolean=true):void		{			var cell:GridCell = this.getCellFromCoordinates(column, row)			cell.link=object;			if(moveToCoordinates)			{				object.x=cell.x;				object.y=cell.y;			}			if(addToStage)			{				this._target.addChild(object);			}		}				/**		 * Returns cell at specified grid coordinates		 *		 * @param  column  column index of grid		 * @param  row  row index of grid		 * @return GridCell object from specified coordinates		 */		public function getCellFromCoordinates(column:uint, row:uint):GridCell		{			return this._cells[(row*_columns)+column];		}				/**		 * Adds DisplayObject to layout in next available position		 *		 * @param  object  DisplayObject to add to organizer		 * @param  moveToCoordinates  automatically move DisplayObject to corresponding cell's coordinates		 * @param  addToStage  adds a child DisplayObject instance to target's DisplayObjectContainer instance		 */		public function addToLayout(object:DisplayObject, moveToCoordinates:Boolean=true, addToStage:Boolean=true):void		{			var cell:GridCell;			cell=this.getNextAvailableCell() as GridCell;			if(!cell) return;						cell.link=object;			if(moveToCoordinates)			{				object.x=cell.x;				object.y=cell.y;			}			if(addToStage)			{				this._target.addChild(object);			}		}				/**		 * Removes specified cell and its link from layout organizer and adjusts layout appropriately		 *		 * @param  cell  cell object to remove		 */		public override function removeCell(cell:Cell):void		{			super.removeCell(cell);			this.adjustLayout();			if(_autoAdjust) this.apply(_tweenFunction);		}				/*PRIVATE METHODS		-------------------------------------------------*/				private function adjustLayout():void		{			//var len:uint=this._cells.length;			var total:uint = _columns*_rows;			var d:Area = this.calculateCellSize();			var c:uint;			var r:uint;			for(var i:uint=0; i<total; i++)			{				var cell:GridCell = this._cells[i];				if(!cell) break;								c = i%_columns;				r = Math.floor(i/(total/_rows));												cell.x = ((d.width*c)+(c*_hPadding)+_x);				cell.y = ((d.height*r)+(r*_yPadding)+_y);			}		}				private function calculateCellSize():Area		{			return new Area((_width-((_columns-1)*_hPadding))/_columns, (_height-((_rows-1)*_yPadding))/_rows);		}				private function initGrid():void		{			this.clearCells();			var d:Area = this.calculateCellSize();			var total:uint = _columns*_rows;			var c:uint;			var r:uint;			for(var i:uint=0; i<total; i++)			{				c = i%_columns;				r = Math.floor(i/(total/_rows));								var cell:GridCell = new GridCell(c,r,((d.width*c)+(c*_hPadding)+_x),((d.height*r)+(r*_yPadding)+_y),d.width, d.height);				this._cells.push(cell);			}		}	}}